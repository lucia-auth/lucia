---
import ExpandIcon from "@icons/ExpandIcon.astro";
type Props = {
	title: string;
	options: {
		title: string;
		href: string;
	}[];
};
---

<select-link>
	<div class="text-sm">
		<button
			class="rounded appearance-none flex place-items-center gap-x-0.5 group py-1.5"
		>
			<span
				class="block leading-none text-main group-hover:text-zinc-700 font-medium select-button-text"
			>
				{Astro.props.title}</span
			>
			<span
				class="h-3.5 w-3.5 block fill-current text-zinc-400 group-hover:text-zinc-700"
			>
				<ExpandIcon />
			</span>
		</button>
		<div
			class="select-menu hidden rounded-md shadow w-fit py-1.5 bg-white border absolute mt-1"
		>
			<ul class="list-none">
				{
					Astro.props.options.map(({ title, href }) => {
						return (
							<li class=" ">
								<a
									href={href}
									class="block px-4 py-1  hover:bg-indigo-50"
								>
									{title}
								</a>
							</li>
						);
					})
				}
			</ul>
		</div>
	</div>
</select-link>

<script>
	import { createToggleState } from "@utils/state";

	const [toggleMenu, onMenuToggle] = createToggleState();
	class SelectLink extends HTMLElement {
		constructor() {
			super();
			const button = this.getElementsByTagName("button").item(0);
			const buttonTitleSpan =
				this.getElementsByClassName("select-button-text").item(0);
			const selectMenu =
				this.getElementsByClassName("select-menu").item(0);

			if (
				button &&
				selectMenu instanceof HTMLDivElement &&
				buttonTitleSpan instanceof HTMLSpanElement
			) {
				button.addEventListener("click", toggleMenu);
				onMenuToggle((menuOpened) => {
					if (menuOpened) {
						buttonTitleSpan.classList.remove("text-main");
						buttonTitleSpan.classList.add("text-zinc-700");

						selectMenu.classList.remove("hidden");
					} else {
						buttonTitleSpan.classList.remove("text-zinc-700");
						buttonTitleSpan.classList.add("text-main");
						selectMenu.classList.add("hidden");
					}
				});
			}
		}
	}

	customElements.define("select-link", SelectLink);
</script>
