---
import type { SubCollection } from "@content";

type Props = {
    collectionId: string;
    subCollections: SubCollection[];
    title?: string;
};
---

<div
    class="h-screen fixed left-0 top-0 border-r hidden lg:block lg:w-72 bg-white pt-24 lg:pt-16 w-full"
    id="menu"
>
    <input type="hidden" value={Astro.props.collectionId} id="collection-id" />
    {
        Astro.props.title && (
            <p class=" ml-8 font-semibold">{Astro.props.title}</p>
        )
    }
    <div
        class="overflow-auto h-full overscroll-contain pt-2 text-sm"
        id="content-nav"
    >
        <slot />
        {
            Astro.props.subCollections.map((subCollection) => {
                return (
                    <div class="mb-6">
                        <p class="ml-8 text-sm font-medium text-zinc-400">
                            {subCollection.title}
                        </p>
                        <ul class="mt-0.5">
                            {subCollection.pages
                                .filter((page) => !page.hidden)
                                .map((page) => {
                                    const urlPathname = [
                                        "",
                                        ...page.pathname
                                            .split("/")
                                            .filter((segment, i) => {
                                                return (
                                                    i !== 0 ||
                                                    segment !== "main"
                                                );
                                            })
                                    ].join("/");
                                    const selected =
                                        Astro.url.pathname.split("/").length >=
                                            page.pathname.split("/").length &&
                                        Astro.url.pathname.includes(
                                            urlPathname
                                        );
                                    return (
                                        <li>
                                            <a
                                                href={urlPathname}
                                                class:list={[
                                                    "w-full py-1 pl-8 hover:bg-indigo-50 block",
                                                    {
                                                        "bg-gray-100": selected
                                                    }
                                                ]}
                                                set:html={page.htmlTitle}
                                            />
                                        </li>
                                    );
                                })}
                        </ul>
                    </div>
                );
            })
        }
    </div>
</div>
<script is:inline>
const contentNavigationElement = document.getElementById("content-nav");
const collectionIdElement = document.getElementById("collection-id");
if (
    contentNavigationElement instanceof HTMLDivElement &&
    collectionIdElement instanceof HTMLInputElement
) {
    const collectionId = collectionIdElement.value;
    const storedScrollPosition = sessionStorage.getItem("scroll_position");
    if (storedScrollPosition !== null) {
        const [prevCollectionId, prevScrollPosition] =
            storedScrollPosition.split(":");
        if (prevCollectionId === collectionId) {
            contentNavigationElement.scrollTop = Number(prevScrollPosition);
        }
    }
    contentNavigationElement.addEventListener("click", () => {
        sessionStorage.setItem(
            `scroll_position`,
            `${collectionId}:${contentNavigationElement.scrollTop.toString()}`
        );
    });
}
</script>
<script>
    import { onMenuToggle } from "@utils/state";

    const menuDiv = document.getElementById("menu");
    if (menuDiv instanceof HTMLDivElement) {
        onMenuToggle((menuOpened) => {
            if (menuOpened) {
                menuDiv.classList.remove("hidden");
            } else {
                menuDiv.classList.add("hidden");
            }
        });
    }
</script>
