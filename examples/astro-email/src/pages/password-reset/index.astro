---
import { sendPasswordResetEmail } from "@auth/email";
import { auth, passwordResetToken } from "@auth/lucia";
import { prismaClient } from "src/db";
import { emailRegex, isValidFormSubmission } from "src/forms/submission";

import MainLayout from "src/layouts/MainLayout.astro";

const authRequest = auth.handleRequest(Astro);

let email = "";
let errorMessage = "";
let success = false;

const handleFormSubmission = async (): Promise<Response | null> => {
	const validSubmission = isValidFormSubmission(Astro.request);
	if (!validSubmission) return null;
	const formData = await Astro.request.formData();
	email = formData.get("email")?.toString() ?? "";
	if (email === null || !emailRegex.test(email)) {
		errorMessage = "Invalid email";
		return null;
	}
	try {
		const databaseUser = await prismaClient.authUser.findFirst({
			where: {
				email: email
			}
		});
		if (!databaseUser) {
			errorMessage = "Email does not exist";
			return null;
		}
		const user = auth.transformDatabaseUser(databaseUser);
		const token = await passwordResetToken.issue(user.userId);
		await sendPasswordResetEmail(user.email, token.toString());
		success = true;
		return null;
	} catch (e) {
		console.log(e);
		errorMessage = "An unknown error occurred";
		return null;
	}
};

const response = await handleFormSubmission();
if (response) return response;

const session = await authRequest.validate();
if (session) {
	return Astro.redirect("/", 302);
}
---

<MainLayout>
	<h1>Reset password</h1>
	<form method="post">
		<label for="email">Email</label>
		<input id="email" name="email" value={email} />
		<input type="submit" value="Send email" />
	</form>
	{errorMessage && <p class="error">{errorMessage}</p>}
	{
		success && (
			<p class="message">A verification email was sent to your inbox</p>
		)
	}
</MainLayout>
