---
import { sendEmailVerificationEmail } from "@auth/email";
import { auth, emailVerificationToken } from "@auth/lucia";
import { Prisma } from "@prisma/client";
import { LuciaError } from "lucia-auth";
import { emailRegex, isValidFormSubmission } from "src/forms/submission";

import MainLayout from "src/layouts/MainLayout.astro";

const authRequest = auth.handleRequest(Astro);

let errorMessage: string | null = null;
let email = "";

const handleFormSubmission = async (): Promise<Response | null> => {
	const validSubmission = isValidFormSubmission(Astro.request);
	if (!validSubmission) return null;
	const formData = await Astro.request.formData();
	email = formData.get("email")?.toString() ?? "";
	if (email === null || !emailRegex.test(email)) {
		errorMessage = "Invalid email";
		return null;
	}
	const password = formData.get("password");
	if (password instanceof File || password === null || password.length < 8) {
		errorMessage = "Invalid password";
		return null;
	}
	try {
		const user = await auth.createUser({
			primaryKey: {
				providerId: "email",
				providerUserId: email,
				password
			},
			attributes: {
				email,
				email_verified: false
			}
		});
		const session = await auth.createSession(user.userId);
		authRequest.setSession(session);
		const token = await emailVerificationToken.issue(user.userId);
		await sendEmailVerificationEmail(email, token.toString());
		return Astro.redirect("/email-verification", 302);
	} catch (e) {
		if (e instanceof LuciaError && e.message === "AUTH_DUPLICATE_KEY_ID") {
			errorMessage = "Email is already taken";
			return null;
		}
		// duplication error
		if (
			e instanceof Prisma.PrismaClientKnownRequestError &&
			e.code === "P2002"
		) {
			errorMessage = "Email is already taken";
			return null;
		}
		errorMessage = "An unknown error occurred";
		return null;
	}
};

const formSubmissionResponse = await handleFormSubmission();
if (formSubmissionResponse) return formSubmissionResponse;

const { user } = await authRequest.validateUser();
if (user) {
	if (!user.emailVerified) return Astro.redirect("/email-verification", 302);
	return Astro.redirect("/", 302);
}
---

<MainLayout>
	<h1>Create an account</h1>
	<form method="post">
		<label for="email">Email</label><br />
		<input id="email" name="email" value={email} /><br />
		<label for="password">Password</label>
		<p>Password should be at least 8 characters long</p>
		<input id="password" name="password" type="password" /><br />

		<input type="submit" value="Continue" />
	</form>
	{errorMessage && <p class="error">{errorMessage}</p>}
	<a href="/login">Sign in</a>
</MainLayout>
