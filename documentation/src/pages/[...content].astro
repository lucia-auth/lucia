---
import ContentTable from "@components/ContentTable.astro";
import Layout from "@components/Layout.astro";
import Header from "@components/Header.astro";

import { getContent } from "@cela/content";
import { frameworkIds } from "@lib/framework";
import redirects from "redirects.json";
import { error404 } from "@lib/error";
import MarkdownContent from "@components/MarkdownContent.astro";
import Banner from "@components/Banner.astro";

const redirectTarget = redirects.find((val) => val.from === Astro.url.pathname);

if (redirectTarget) {
	return Astro.redirect(redirectTarget.to, 302);
}

let requestedFrameworkId = Astro.url.searchParams.get("framework") ?? null;

requestedFrameworkId ||= Astro.cookies.get("framework").value ?? null;

if (requestedFrameworkId && !frameworkIds.includes(requestedFrameworkId)) {
	requestedFrameworkId = null;
}

if (requestedFrameworkId) {
	Astro.cookies.set("framework", requestedFrameworkId ?? "none", {
		path: "/"
	});
}

const content = await getContent(Astro.url.pathname, requestedFrameworkId);

if (!content) {
	const errorResponse = error404(Astro.url);
	return errorResponse;
}

if (content.metaData.redirect) {
	return Astro.redirect(content.metaData.redirect, 302);
}

if (content.metaData.frameworkId) {
	Astro.cookies.set("framework", content.metaData.frameworkId ?? "none", {
		path: "/"
	});
}

const frameworkId =
	requestedFrameworkId === "none" ? null : requestedFrameworkId;

const contributePageUrl = new URL(
	`${content.metaData.path}.md`,
	"https://github.com/pilcrowOnPaper/lucia/blob/main/documentation/collection"
);
---

<Layout
	meta={{
		title: content.metaData.title,
		description: content.metaData.description
	}}
>
	<Header />
	<ContentTable
		collectionId={content.metaData.collectionId}
		frameworkId={frameworkId}
	/>
	<main
		class="h-full min-h-screen bg-white dark:bg-zinc-900 dark:text-zinc-200 lg:pr-64 xl:pl-80"
	>
		<article class="overflow-hidden px-4 pt-24 pb-12 sm:px-8 md:px-24 xl:px-24">
			<h1 class="mb-16 break-words text-4xl font-semibold sm:text-5xl">
				{content.metaData.title}
			</h1>
			<MarkdownContent>
				<content.Content />
			</MarkdownContent>
			<div class="mt-16">
				<a
					href={contributePageUrl}
					class="text-main cursor-pointer; hover:underline"
					>Contribute to this page</a
				>
			</div>
		</article>
	</main>
	<div class="fixed right-0 top-0 hidden h-screen w-64 pr-8 pt-24 lg:block">
		<h2 class="mb-1 text-sm font-medium">On this page</h2>
		<ul
			class="relative h-full list-none overflow-auto overscroll-contain pb-8 text-sm text-zinc-500 dark:text-zinc-400"
		>
			<li class="my-1">
				<a href="#" class="hover:text-shadow-zinc hover:dark:text-zinc-200">
					Overview
				</a>
			</li>
			{
				content.headings
					.filter((heading) => heading.depth < 4)
					.map((heading) => {
						const hash = heading.slug.split("/").reverse()[0];
						return (
							<li
								class:list={[
									"my-2",
									{
										"ml-4": heading.depth === 3
									}
								]}
							>
								<a
									href={`#${hash}`}
									class="hover:text-shadow-zinc dark:hover:text-zinc-200"
								>
									{heading.text}
								</a>
							</li>
						);
					})
			}
		</ul>
	</div>
	<Banner />
</Layout>
