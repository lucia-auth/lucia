---
import ContentTable from "@components/ContentTable.astro";
import Layout from "@components/Layout.astro";
import Header from "@components/ContentHeader.astro";
import MarkdownContent from "@components/MarkdownContent.astro";

import { getContent } from "@cela/content";
import redirects from "redirects.json";
import { error404 } from "@utils/error";
import {
	generateMarkdownHtml,
	removeMarkdownFormatting
} from "@markdown/index";
import { joinUrlPaths } from "@utils/path";
import { handleRequest } from "@server/request";

const redirectTarget = redirects.find((val) => val.from === Astro.url.pathname);

if (redirectTarget) {
	return Astro.redirect(redirectTarget.to, 302);
}

const request = handleRequest(Astro);
let frameworkId = request.getFrameworkId();

const content = await getContent(Astro.url.pathname, frameworkId);

if (!content) {
	const errorResponse = error404(Astro.url);
	return errorResponse;
}

if (content.metaData.redirect) {
	return Astro.redirect(content.metaData.redirect, 302);
}
if (content.metaData.frameworkId) {
	frameworkId = content.metaData.frameworkId;
	request.setFrameworkId(frameworkId);
}

const contributePageHref = joinUrlPaths(
	"https://github.com/pilcrowOnPaper/lucia/blob/main/documentation",
	content.mappedContentPath
);
---

<Layout
	meta={{
		title: removeMarkdownFormatting(content.metaData.rawTitle),
		description: content.metaData.description
	}}
	content={{ collectionId: content.metaData.collectionId, frameworkId }}
>
	<Header />
	<ContentTable
		collectionId={content.metaData.collectionId}
		frameworkId={frameworkId}
	/>
	<main
		class="h-full min-h-screen bg-white dark:bg-zinc-900 dark:text-zinc-200 lg:pr-64 xl:pl-80"
	>
		<article
			class="overflow-hidden px-4 pb-12 pt-36 sm:px-8 md:px-24 xl:px-24 xl:pt-24"
		>
			<p
				class="text-main mb-2 text-lg font-medium"
				set:html={generateMarkdownHtml(content.metaData.rawSubCollectionTitle)}
			/>
			<h1
				class="mb-16 break-words text-4xl font-semibold sm:text-5xl"
				set:html={generateMarkdownHtml(content.metaData.rawTitle)}
			/>
			<MarkdownContent>
				<content.Content />
			</MarkdownContent>
			<div class="mt-16">
				<div class="lg:hidden">
					<a
						href={contributePageHref}
						class="text-main cursor-pointer; hover:underline"
						>Contribute to this page</a
					>
				</div>
			</div>
		</article>
	</main>
	<div
		class="fixed right-0 top-0 hidden h-screen w-64 pr-8 pt-36 lg:block xl:pt-24"
	>
		<div class="flex h-full flex-col">
			<div class="grow overflow-auto overscroll-contain pb-4">
				<h2 class="mb-4 text-sm font-medium dark:text-zinc-200">
					On this page
				</h2>

				<ul
					class="h-fit list-none text-sm text-zinc-500 dark:text-zinc-400"
					id="heading-list"
				>
					<li class="my-1">
						<a href="#" class="hover:text-shadow-zinc hover:dark:text-zinc-200">
							Overview
						</a>
					</li>
					{
						content.headings
							.filter((heading) => heading.depth < 4)
							.map((heading) => {
								return (
									<li
										class:list={[
											"my-2",
											{
												"ml-4": heading.depth === 3
											}
										]}
									>
										<a
											href={heading.hash}
											class="hover:text-shadow-zinc dark:hover:text-zinc-200"
											set:html={generateMarkdownHtml(heading.rawText)}
										/>
									</li>
								);
							})
					}
				</ul>
				<div class="mt-6 text-sm">
					<a
						href={contributePageHref}
						class="text-main cursor-pointer; hover:underline"
						>Contribute to this page</a
					>
				</div>
			</div>
		</div>
	</div>
</Layout>

<style>
	:global(#heading-list code) {
		@apply text-xs;
	}
</style>

<script>
	const copyLinkButton = document.getElementById("copy-link");
	const frameworkIdElement = document.getElementById("framework-id");
	if (
		copyLinkButton instanceof HTMLButtonElement &&
		frameworkIdElement instanceof HTMLInputElement
	) {
		const url = new URL(window.location.href);
		url.searchParams.set("framework", frameworkIdElement.value || "none");
		copyLinkButton.addEventListener("click", () => {
			navigator.clipboard.writeText(url.toString());
		});
	}
</script>
