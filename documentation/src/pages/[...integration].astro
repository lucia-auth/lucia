---
import ContentTable from "@components/doc/content-table";
import DocumentLayout from "@layouts/DocumentLayout.astro";

import type { CollectionQuery, DocumentQuery } from "@db/types";
import type { GetStaticPaths } from "astro";
import { type Q, db } from "@lib/db";

type Document = DocumentQuery<Q["integration"]["*"]["*"]>;

type Props = {
	doc: Document;
	collection: CollectionQuery<Q["integration"]["*"]>;
};

export const getStaticPaths: GetStaticPaths = async () => {
	const integrationCollection = await db.collection("integration").get();
	const documents = integrationCollection._collections.reduce((prev, curr) => {
		return [
			...prev,
			...curr._collections.reduce((prev, curr) => [...prev, ...curr._documents], [] as Document[])
		];
	}, [] as Document[]);
	return documents.map((doc) => {
		const pathSegements = doc._path.split("/"); // ["integration", "astro", "start-here", "getting-started"]
		const collection = integrationCollection._collections.find(
			(col) => col._id === pathSegements[1]
		);
		if (!collection) throw new Error();
		return {
			params: {
				integration: pathSegements.slice(1).join("/")
			},
			props: {
				doc,
				collection
			} satisfies Props
		};
	});
};

const { doc, collection } = Astro.props;
---

<DocumentLayout doc={doc}>
	<ContentTable
		client:load
		collections={[collection]}
		title={`${collection.title} integration`}
		currentPath={Astro.url.pathname}
		slot="table"
	/>
	<doc._Content slot="content" />
</DocumentLayout>
