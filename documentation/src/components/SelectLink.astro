---
import ExpandIcon from "@icons/ExpandIcon.astro";
type Props = {
	title: string;
	options: {
		htmlTitle: string;
		href: string;
	}[];
};
---

<select-link>
	<div class="text-sm">
		<button
			class="group flex appearance-none place-items-center gap-x-0.5 rounded py-1.5"
		>
			<span
				class="text-main select-button-text block font-medium leading-none group-hover:text-black"
			>
				{Astro.props.title}
			</span>
			<span
				class="block h-3.5 w-3.5 fill-current text-zinc-400 group-hover:text-black"
			>
				<ExpandIcon />
			</span>
		</button>
		<div
			class="select-menu absolute z-10 mt-1 hidden w-fit rounded-md border bg-white py-1.5 shadow"
		>
			<ul class="list-none">
				{
					Astro.props.options.map((option) => {
						return (
							<li class=" ">
								<a
									href={option.href}
									class="block px-4 py-1  hover:bg-indigo-50"
									set:html={option.htmlTitle}
								/>
							</li>
						);
					})
				}
			</ul>
		</div>
	</div>
</select-link>

<script>
	import {
		createToggleState,
		onMenuToggle,
		setElementVisibility
	} from "@utils/state";

	const [toggleDropdown, onDropdownToggle] = createToggleState();

	class SelectLink extends HTMLElement {
		constructor() {
			super();
			const button = this.getElementsByTagName("button").item(0);
			const buttonTitleSpan =
				this.getElementsByClassName("select-button-text").item(0);
			const selectMenu = this.getElementsByClassName("select-menu").item(0);

			if (
				button &&
				selectMenu instanceof HTMLDivElement &&
				buttonTitleSpan instanceof HTMLSpanElement
			) {
				button.addEventListener("click", toggleDropdown);
				onDropdownToggle((dropdownVisible) => {
					setElementVisibility(selectMenu, dropdownVisible);
					if (dropdownVisible) {
						buttonTitleSpan.classList.remove("text-main");
					} else {
						buttonTitleSpan.classList.add("text-main");
					}
				});
			}
		}
	}

	customElements.define("select-link", SelectLink);
</script>
