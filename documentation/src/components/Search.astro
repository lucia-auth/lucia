---
import SearchIcon from "@icons/Search.astro";
---

<div
	class="fixed top-0 z-30 hidden h-screen w-screen overflow-auto bg-black bg-opacity-5 backdrop-blur-md"
	id="search-backdrop"
>
</div>
<div
	class="fixed top-0 z-30 hidden w-full bg-white px-8 pb-6 pt-20"
	id="search-area"
>
	<div class="mx-auto max-w-2xl">
		<div class="flex place-items-center gap-x-4">
			<div class="block w-5 fill-current text-zinc-500">
				<SearchIcon />
			</div>
			<input
				id="search-bar"
				class="w-full text-2xl font-medium outline-none placeholder:font-medium placeholder:text-zinc-500"
				placeholder="Search"
				spellcheck="false"
			/>
		</div>
		<ul id="search-result" class="mt-6 h-full max-h-80 overflow-auto"></ul>
	</div>
</div>

<script>
	import { setElementVisibility } from "@utils/dom";
	import { queryContent } from "@utils/search";
	import { onSearchVisibilityUpdate, searchVisible } from "@utils/state";

	const searchBackdropDiv = document.getElementById("search-backdrop");
	const searchAreaDiv = document.getElementById("search-area");
	const searchBarInput = document.getElementById("search-bar");
	const searchResultUList = document.getElementById("search-result");
	if (!(searchBackdropDiv instanceof HTMLDivElement)) throw new Error();
	if (!(searchAreaDiv instanceof HTMLDivElement)) throw new Error();
	if (!(searchBarInput instanceof HTMLInputElement)) throw new Error();
	if (!(searchResultUList instanceof HTMLUListElement)) throw new Error();

	onSearchVisibilityUpdate(async (incomingVisible) => {
		setElementVisibility(searchBackdropDiv, incomingVisible);
		setElementVisibility(searchAreaDiv, incomingVisible);
		if (incomingVisible === true) {
			searchBarInput.focus();
		} else {
			searchBarInput.blur();
			searchBarInput.value = "";
		}
	});

	searchBarInput.addEventListener("input", async (e) => {
		const target = e.target;
		if (!(target instanceof HTMLInputElement)) {
			throw new Error("Missing event target");
		}
		const matchedPages = await queryContent(target.value);
		// delete all children
		searchResultUList.replaceChildren();

		for (const matchedPage of matchedPages) {
			const parentLI = document.createElement("li");
			const parentAnchor = document.createElement("a");
			parentAnchor.text = matchedPage.title;
			parentAnchor.href = matchedPage.href;
			parentAnchor.classList.add(
				"hover:bg-indigo-50",
				"block",
				"px-2",
				"rounded-sm"
			);
			parentLI.append(parentAnchor);
			searchResultUList.append(parentLI);
			if (matchedPage.headings.length < 1) continue;
			const parentUList = document.createElement("ul");
			parentLI.append(parentUList);
			parentUList.classList.add("pl-6", "mb-0.5");
			for (const matchedHeading of matchedPage.headings) {
				const childAnchor = document.createElement("a");
				childAnchor.text = matchedHeading.title;
				childAnchor.href = matchedPage.href + "#" + matchedHeading.hash;
				childAnchor.classList.add(
					"hover:bg-indigo-50",
					"block",
					"px-2",
					"rounded-sm"
				);
				const childLI = document.createElement("li");
				childLI.append(childAnchor);
				parentUList.append(childLI);
			}
		}
	});

	searchBackdropDiv.addEventListener("click", (e) => {
		e.stopPropagation();
		searchVisible.set(false);
	});

	document.addEventListener("keyup", (e) => {
		// using keyup instead of keydown to prevent "/" getting typed when search bar appears
		if (e.key !== "/") return;
		searchVisible.set(true);
	});

	document.addEventListener("keydown", (e) => {
		if (e.key !== "Escape") return;
		// delete all children
		searchResultUList.replaceChildren();
		searchVisible.set(false);
	});
</script>
