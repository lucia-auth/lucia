---
import { comparePathname } from "@utils/url";

type Page = [title: string, href: string];
type Section = {
	title: string;
	pages: Page[];
};

type Props = {
	id: string;
	content: (Section | Page)[];
	title?: string;
};

const parseMarkdownCode = (text: string) => {
	return text.replace("`", "<code>").replace("`", "</code>");
};
---

<div
	class="h-screen fixed left-0 top-0 border-r hidden lg:block lg:w-72 bg-white pt-24 lg:pt-16 w-full z-20"
	id="menu"
>
	<input type="hidden" value={Astro.props.id} id="menu-id" />
	{Astro.props.title && <p class=" ml-8 font-semibold">{Astro.props.title}</p>}
	<div
		class="overflow-auto h-full overscroll-contain pt-2 text-sm pb-8"
		id="content-nav"
	>
		{
			Astro.props.content.map((content) => {
				if (Array.isArray(content)) {
					const [title, href] = content;
					const selected = comparePathname(Astro.url.pathname, href);
					return (
						<a
							href={href}
							class:list={[
								"w-full py-1 pl-8 hover:bg-indigo-50 block",
								{
									"bg-gray-100": selected
								}
							]}
							set:html={parseMarkdownCode(title)}
						/>
					);
				}
				return (
					<div class="mt-6">
						<p class="ml-8 text-sm font-medium text-zinc-400">
							{content.title}
						</p>
						<ul class="mt-0.5">
							{content.pages.map((page) => {
								const [title, href] = page;
								const selected = comparePathname(Astro.url.pathname, href);
								return (
									<li>
										<a
											href={href}
											class:list={[
												"w-full py-1 pl-8 hover:bg-indigo-50 block",
												{
													"bg-gray-100": selected
												}
											]}
											set:html={parseMarkdownCode(title)}
										/>
									</li>
								);
							})}
						</ul>
					</div>
				);
			})
		}
	</div>
</div>

<script is:inline>
const contentNavigationElement = document.getElementById("content-nav");
const collectionIdElement = document.getElementById("menu-id");
if (
	contentNavigationElement instanceof HTMLDivElement &&
	collectionIdElement instanceof HTMLInputElement
) {
	const collectionId = collectionIdElement.value;
	const storedScrollPosition = sessionStorage.getItem("scroll_position");
	if (storedScrollPosition !== null) {
		const [prevCollectionId, prevScrollPosition] =
			storedScrollPosition.split(":");
		if (prevCollectionId === collectionId) {
			contentNavigationElement.scrollTop = Number(prevScrollPosition);
		}
	}
	contentNavigationElement.addEventListener("click", () => {
		sessionStorage.setItem(
			`scroll_position`,
			`${collectionId}:${contentNavigationElement.scrollTop.toString()}`
		);
	});
}
</script>

<script>
	import { onMenuToggle, setElementVisibility } from "@utils/state";

	const menuDiv = document.getElementById("menu");
	if (menuDiv instanceof HTMLDivElement) {
		onMenuToggle((menuOpened) => {
			setElementVisibility(menuDiv, menuOpened);
		});
	}
</script>
