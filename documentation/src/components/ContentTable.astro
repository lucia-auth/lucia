---
import FrameworkSelect from "@components/FrameworkSelect";
import { getCollection } from "@cela/content";

type Props = {
	frameworkId: string | null;
	collectionId?: string;
};

const { frameworkId } = Astro.props;
let collectionId = Astro.props.collectionId ?? "main";
const collection = await getCollection(collectionId, frameworkId);

if (!collection)
	return new Response(null, {
		status: 404
	});

const currentPathname = Astro.url.pathname;
---

<div
	class="bg-zinc-80 dark:bg-shadow-zinc fixed z-30 hidden h-full w-full overflow-hidden pb-8 pt-20 dark:text-zinc-400 md:w-80 xl:block"
	id="content-table-wrapper"
>
	<div
		class="block border-b border-zinc-200 pb-4 dark:border-zinc-800 sm:hidden"
	>
		<a
			class="hover:bg-zinc-150 dark:hover:bg-black-zinc block w-full rounded py-1 pl-8 pr-4"
			href="/reference">Reference</a
		>
	</div>
	<input type="hidden" value={collection.id} id="collection-id" />
	<input type="hidden" value={frameworkId} id="framework-id" />

	<div class="ml-8 mr-4 border-b border-zinc-200 py-6 dark:border-zinc-800">
		{
			!!collection.title && (
				<p class="mb-1 text-lg font-semibold">{collection.title}</p>
			)
		}
		<FrameworkSelect client:idle current={Astro.props.frameworkId} />
		<a
			href="/search"
			id="search-button"
			class="hover:border-main dark:hover:border-main mt-2 block w-full cursor-text rounded-md border border-zinc-200 bg-zinc-50 px-4 py-1.5 text-left text-zinc-500 dark:border-zinc-800 dark:bg-zinc-900"
			>Search</a
		>
	</div>
	<div
		id="content-table"
		class="bg-zinc-80 dark:bg-shadow-zinc relative flex h-full flex-col gap-y-8 overflow-auto overscroll-contain pb-32 pt-2 md:pb-24"
	>
		{
			collection.sections.map((section) => {
				return (
					<div>
						<p class="py-1 pl-8 pr-4 font-medium">{section.title}</p>
						<ul>
							{section.documents.map((doc) => {
								const isSelected = doc.href === currentPathname;
								return (
									<li>
										<a
											class:list={[
												"block hover:bg-zinc-150 pl-8 pr-4 py-1  dark:hover:bg-black-zinc",
												{
													"text-main": isSelected
												}
											]}
											href={doc.href}
										>
											{doc.title}
										</a>
									</li>
								);
							})}
						</ul>
					</div>
				);
			})
		}
	</div>
</div>

<div
	class="fixed z-20 hidden h-full w-full overscroll-contain bg-black bg-opacity-20 dark:bg-white dark:bg-opacity-5 xl:hidden"
	id="menu-backdrop"
>
</div>
<script is:inline>
	const contentTableElement = document.getElementById("content-table");
	const collectionIdElement = document.getElementById("collection-id");
	if (
		contentTableElement instanceof HTMLDivElement &&
		collectionIdElement instanceof HTMLInputElement
	) {
		const collectionId = collectionIdElement.value;
		const storedScrollPosition = sessionStorage.getItem("scroll_position");
		if (storedScrollPosition !== null) {
			const [prevCollectionId, prevScrollPosition] =
				storedScrollPosition.split(":");
			if (prevCollectionId === collectionId) {
				contentTableElement.scrollTop = Number(prevScrollPosition);
			}
		}
		contentTableElement.addEventListener("click", (e) => {
			if (!(e.target instanceof HTMLAnchorElement)) return;
			e.preventDefault();
			sessionStorage.setItem(
				`scroll_position`,
				`${collectionId}:${contentTableElement.scrollTop.toString()}`
			);
			window.location.href = e.target.href;
		});
	}
</script>

<script>
	import {
		addClassName,
		removeClassName,
		unFreezePage,
		freezePage
	} from "@lib/dom";
	import {
		onMenuStateUpdate,
		setSearchMenuState,
		setMenuState
	} from "../lib/state";

	const contentTableWrapperElement = document.getElementById(
		"content-table-wrapper"
	);
	const menuBackdropElement = document.getElementById("menu-backdrop");

	if (
		contentTableWrapperElement instanceof HTMLDivElement &&
		menuBackdropElement instanceof HTMLDivElement
	) {
		onMenuStateUpdate((menuOpen) => {
			if (menuOpen) {
				freezePage();
				removeClassName(contentTableWrapperElement, "hidden");
				removeClassName(menuBackdropElement, "hidden");
			} else {
				unFreezePage();
				addClassName(contentTableWrapperElement, "hidden");
				addClassName(menuBackdropElement, "hidden");
			}
		});
		menuBackdropElement.addEventListener("click", () => {
			setMenuState(false);
		});
	}

	const searchButtonElement = document.getElementById("search-button");

	if (searchButtonElement instanceof HTMLAnchorElement) {
		searchButtonElement.addEventListener("click", (e) => {
			e.preventDefault();
			setMenuState(false);
			setSearchMenuState(true);
		});
	}
</script>
