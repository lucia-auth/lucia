---
import { FrameworkButton } from "./buttons";
import { getCollection } from "@cela/content";

type Props = {
	frameworkId: string | null;
	collectionId?: string;
};

const { frameworkId } = Astro.props;
let collectionId = Astro.props.collectionId ?? "main";
const collection = await getCollection(collectionId, frameworkId);

if (!collection)
	return new Response(null, {
		status: 404
	});

const currentPathname = Astro.url.pathname;
---

<script>
	import { addClassName, removeClassName } from "@lib/dom";
	import { onMenuToggle } from "../lib/state";
	const backdropElement = document.getElementById("backdrop");
	const contentTableWrapperElement = document.getElementById(
		"content-table-wrapper"
	);
	if (
		backdropElement instanceof HTMLDivElement &&
		contentTableWrapperElement instanceof HTMLDivElement
	) {
		onMenuToggle((isMenuOpen) => {
			if (isMenuOpen) {
				removeClassName(backdropElement, "hidden");
				removeClassName(contentTableWrapperElement, "hidden");
			} else {
				addClassName(backdropElement, "hidden");
				addClassName(contentTableWrapperElement, "hidden");
			}
		});
	}
</script>

<div
	class="fixed w-full md:w-80 h-full pb-8 pt-20 bg-zinc-80 overflow-hidden z-40 hidden xl:block dark:bg-shadow-zinc dark:text-zinc-400"
	id="content-table-wrapper"
>
	<div
		class=" block sm:hidden border-b border-zinc-200 dark:border-zinc-800 pb-4"
	>
		<a
			class="pl-8 pr-4 rounded py-1 block w-full hover:bg-zinc-150 dark:hover:bg-black-zinc"
			href="/reference">Reference</a
		>
	</div>
	<input type="hidden" value={collection.id} id="collection-id" />

	<div class="ml-8 mr-4 border-b py-6 border-zinc-200 dark:border-zinc-800">
		{
			!!collection.title && (
				<p class="text-lg font-semibold">{collection.title}</p>
			)
		}
		<FrameworkButton client:idle current={Astro.props.frameworkId} />
	</div>
	<div
		id="content-table"
		class="relative overflow-auto overscroll-contain h-full pb-24 gap-y-8 flex-col flex pt-2 bg-zinc-80 dark:bg-shadow-zinc"
	>
		{
			collection.sections.map((section) => {
				return (
					<div class="">
						<p class="font-medium pl-8 pr-4 py-1">{section.title}</p>
						<ul>
							{section.documents.map((doc) => {
								const isSelected = doc.href === currentPathname;
								return (
									<li>
										<a
											class:list={[
												"block hover:bg-zinc-150 pl-8 pr-4 py-1  dark:hover:bg-black-zinc",
												{
													"text-main": isSelected
												}
											]}
											href={doc.href}
										>
											{doc.title}
										</a>
									</li>
								);
							})}
						</ul>
					</div>
				);
			})
		}
	</div>
</div>
<div
	class="fixed w-full h-full bg-shadow-zinc opacity-30 overscroll-contain z-30 hidden xl:hidden"
	id="backdrop"
>
</div>
<script is:inline>
	const contentTableElement = document.getElementById("content-table");
	const collectionIdElement = document.getElementById("collection-id");
	if (
		contentTableElement instanceof HTMLDivElement &&
		collectionIdElement instanceof HTMLInputElement
	) {
		const collectionId = collectionIdElement.value;
		const storedScrollPosition = sessionStorage.getItem("scroll_position");
		if (storedScrollPosition !== null) {
			const [prevCollectionId, prevScrollPosition] =
				storedScrollPosition.split(":");
			if (prevCollectionId === collectionId) {
				contentTableElement.scrollTop = Number(prevScrollPosition);
			}
		}
		contentTableElement.addEventListener("click", (e) => {
			if (!(e.target instanceof HTMLAnchorElement)) return;
			e.preventDefault();
			sessionStorage.setItem(
				`scroll_position`,
				`${collectionId}:${contentTableElement.scrollTop.toString()}`
			);
			window.location.href = e.target.href;
		});
	}
</script>
