name: "ðŸš€ publish"

on:
  push:
    branches:
      - main

jobs:
  check_pkgs:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      packages: ${{ steps.runscript.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - id: runscript
        run: |
          #check last commit
          output=$(git diff --name-only HEAD^ HEAD)
          pkg_array=()
          declare -A uniq_pkg_array

          #loop through git diff for changes
          for line in ${output[@]}; do
              if [[ $line == packages/lucia-auth* ]];
              then
                  pkg_array+=("lucia-auth")
              elif [[ $line == packages/sveltekit* ]];
              then
                  pkg_array+=("sveltekit")
              elif [[ $line == packages/express* ]];
              then
                  pkg_array+=("express")
              elif [[ $line == packages/nextjs* ]];
              then
                  pkg_array+=("nextjs")
              elif [[ $line == packages/astro* ]];
              then
                  pkg_array+=("astro")
              elif [[ $line == packages/oauth* ]];
              then
                  pkg_array+=("oauth")
              elif [[ $line == packages/adapter-mongoose* ]];
              then
                  pkg_array+=("adapter-mongoose")
              elif [[ $line == packages/adapter-prisma* ]];
              then
                  pkg_array+=("adapter-prisma")
              elif [[ $line == packages/adapter-kysely* ]];
              then
                  pkg_array+=("adapter-kysely")
              elif [[ $line == packages/adapter-fauna* ]];
              then
                  pkg_array+=("adapter-fauna")
              elif [[ $line == packages/adapter-test* ]];
              then
                  pkg_array+=("adapter-test")
              elif [[ $line == packages/session-adapter-redis* ]];
              then
                  pkg_array+=("session-adapter-redis")
              fi
          done

          for pkg in "${pkg_array[@]}"; do
            uniq_pkg_array[$pkg]=0
          done

          #set output vars
          echo "::set-output name=matrix::${!uniq_pkg_array[@]}"

  publish:
    runs-on: ubuntu-latest
    needs: check_pkgs
    if: ${{ needs.check_pkgs.outputs.packages != '' && needs.check_pkgs.outputs.packages != '[]' }}
    steps:
      - name: ðŸ“š checkout
        uses: actions/checkout@v3
      - name: ðŸŸ¢ node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org
      - name: publish
        run: |
          dir=$(pwd)
          npm i -g pnpm
          pnpm install --no-frozen-lockfile
          cd packages/lucia-auth && pnpm install --no-frozen-lockfile && pnpm build && cd ../../
          cd packages/adapter-test && pnpm install --no-frozen-lockfile && pnpm build && cd ../../

          pkg_string="${{ needs.check_pkgs.outputs.packages }}"
          build_cmd="pnpm install --no-frozen-lockfile && pnpm package && cd ../../"

          if [[ $pkg_string == *"lucia-auth"* ]]; then
            cd packages/lucia-auth && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"sveltekit"* ]]; then
            cd packages/sveltekit && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"express"* ]]; then
            cd packages/express && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"nextjs"* ]]; then
            cd packages/nextjs && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"astro"* ]]; then
            cd packages/astro && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"oauth"* ]]; then
            cd packages/oauth && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"adapter-mongoose"* ]]; then
            cd packages/adapter-mongoose && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"adapter-prisma"* ]]; then
            cd packages/adapter-prisma && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"adapter-kysely"* ]]; then
            cd packages/adapter-kysely && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"adapter-fauna"* ]]; then
            cd packages/adapter-fauna && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"adapter-test"* ]]; then
            cd packages/adapter-test && eval "$build_cmd"
          fi
          if [[ $pkg_string == *"session-adapter-redis"* ]]; then
            cd packages/session-adapter-redis && eval "$build_cmd"
          fi

        env:
          NODE_AUTH_TOKEN: ${{secrets.PNPM_AUTH_TOKEN}}
